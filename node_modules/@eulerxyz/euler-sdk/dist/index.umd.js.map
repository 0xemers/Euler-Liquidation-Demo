{"version":3,"file":"index.umd.js","sources":["../src/ERC20.ts","../src/types.ts","../src/permits.ts","../src/helpers.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n} from \"@eulerxyz/euler-interfaces/types/common\";\n\n\nexport const abi = [\n  \"event Approval(address indexed owner, address indexed spender, uint value)\",\n  \"event Transfer(address indexed from, address indexed to, uint value)\",\n  \"function name() external view returns (string memory)\",\n  \"function symbol() external view returns (string memory)\",\n  \"function decimals() external view returns (uint8)\",\n  \"function totalSupply() external view returns (uint)\",\n  \"function balanceOf(address owner) external view returns (uint)\",\n  \"function allowance(address owner, address spender) external view returns (uint)\",\n  \"function approve(address spender, uint value) external returns (bool)\",\n  \"function transfer(address to, uint value) external returns (bool)\",\n  \"function transferFrom(address from, address to, uint value) external returns (bool)\",\n];\n\n\nexport interface ERC20Interface extends utils.Interface {\n  functions: {\n    \"allowance(address,address)\": FunctionFragment;\n    \"approve(address,uint256)\": FunctionFragment;\n    \"balanceOf(address)\": FunctionFragment;\n    \"decimals()\": FunctionFragment;\n    \"name()\": FunctionFragment;\n    \"symbol()\": FunctionFragment;\n    \"totalSupply()\": FunctionFragment;\n    \"transfer(address,uint256)\": FunctionFragment;\n    \"transferFrom(address,address,uint256)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"allowance\"\n      | \"approve\"\n      | \"balanceOf\"\n      | \"decimals\"\n      | \"name\"\n      | \"symbol\"\n      | \"totalSupply\"\n      | \"transfer\"\n      | \"transferFrom\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"allowance\",\n    values: [string, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"approve\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"balanceOf\", values: [string]): string;\n  encodeFunctionData(functionFragment: \"decimals\", values?: undefined): string;\n  encodeFunctionData(functionFragment: \"name\", values?: undefined): string;\n  encodeFunctionData(functionFragment: \"symbol\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"totalSupply\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transfer\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferFrom\",\n    values: [string, string, BigNumberish]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"allowance\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"approve\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"balanceOf\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"decimals\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"name\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"symbol\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"totalSupply\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"transfer\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferFrom\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"Approval(address,address,uint256)\": EventFragment;\n    \"Transfer(address,address,uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Approval\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Transfer\"): EventFragment;\n}\n\nexport interface ApprovalEventObject {\n  owner: string;\n  spender: string;\n  value: BigNumber;\n}\nexport type ApprovalEvent = TypedEvent<\n  [string, string, BigNumber],\n  ApprovalEventObject\n>;\n\nexport type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;\n\nexport interface TransferEventObject {\n  from: string;\n  to: string;\n  value: BigNumber;\n}\nexport type TransferEvent = TypedEvent<\n  [string, string, BigNumber],\n  TransferEventObject\n>;\n\nexport type TransferEventFilter = TypedEventFilter<TransferEvent>;\n\nexport interface ERC20Contract extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: ERC20Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    allowance(\n      holder: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    decimals(overrides?: CallOverrides): Promise<[number]>;\n\n    name(overrides?: CallOverrides): Promise<[string]>;\n\n    symbol(overrides?: CallOverrides): Promise<[string]>;\n\n    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  allowance(\n    holder: string,\n    spender: string,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  approve(\n    spender: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  decimals(overrides?: CallOverrides): Promise<number>;\n\n  name(overrides?: CallOverrides): Promise<string>;\n\n  symbol(overrides?: CallOverrides): Promise<string>;\n\n  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n  transfer(\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    allowance(\n      holder: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    decimals(overrides?: CallOverrides): Promise<number>;\n\n    name(overrides?: CallOverrides): Promise<string>;\n\n    symbol(overrides?: CallOverrides): Promise<string>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {\n    \"Approval(address,address,uint256)\"(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n    Approval(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n\n    \"Transfer(address,address,uint256)\"(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n    Transfer(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n  };\n\n  estimateGas: {\n    allowance(\n      holder: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    decimals(overrides?: CallOverrides): Promise<BigNumber>;\n\n    name(overrides?: CallOverrides): Promise<BigNumber>;\n\n    symbol(overrides?: CallOverrides): Promise<BigNumber>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    allowance(\n      holder: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    balanceOf(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n","import { Contract, providers, Signer, BytesLike, ContractInterface } from \"ethers\";\nimport * as contracts from \"./eulerTypes\";\nimport { ERC20Contract } from \"./ERC20\";\n\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n  T,\n  Exclude<keyof T, Keys>\n> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n  }[Keys];\n\nexport type BatchItem = {\n  contract: string | Contract;\n  address?: string;\n  method: string;\n  args: any[];\n  allowError?: boolean;\n  staticCall?: boolean;\n};\n\nexport type BatchResponse = {\n  success: boolean;\n  result: BytesLike;\n};\n\nexport type Token = {\n  name: string;\n  address: string;\n  chainId: number;\n  symbol: string;\n  decimals: number;\n  image?: string;\n  extensions?: any;\n};\n\nexport type TokenWithPermit = Token & {\n  extensions: {\n    permit: {\n      type: string;\n      variant?: string;\n      domain: RequireAtLeastOne<\n        {\n          name?: string;\n          version?: string;\n          chainId?: number;\n          verifyingContract?: string;\n          salt?: string;\n        },\n        \"name\" | \"version\" | \"chainId\" | \"verifyingContract\" | \"salt\"\n      >;\n    };\n    [key: string]: any;\n  };\n};\n\nexport type EulerAddresses = {\n  euler: string;\n  exec: string;\n  liquidation: string;\n  markets: string;\n  swap: string;\n  eulStakes: string;\n  eulDistributor: string;\n  eulerGeneralView: string;\n  eul: string;\n  [contractName: string]: string;\n};\n\nexport type EulerABIs = {\n  euler: ContractInterface;\n  exec: ContractInterface;\n  liquidation: ContractInterface;\n  markets: ContractInterface;\n  swap: ContractInterface;\n  eulStakes: ContractInterface;\n  eulDistributor: ContractInterface;\n  eulerGeneralView: ContractInterface;\n  eul: ContractInterface;\n  eToken: ContractInterface;\n  dToken: ContractInterface;\n  pToken: ContractInterface;\n  [contractName: string]: ContractInterface;\n};\n\nexport type NetworkConfig = {\n  addresses: EulerAddresses;\n  referenceAsset: string;\n  eul: TokenWithPermit;\n};\n\nexport type SignerOrProvider = providers.Provider | Signer | string;\n\nexport type Contracts = {\n  euler: contracts.EulerContract;\n  exec: contracts.ExecContract;\n  liquidation: contracts.LiquidationContract;\n  markets: contracts.MarketsContract;\n  swap: contracts.SwapContract;\n  eulStakes: contracts.EulStakesContract;\n  eulDistributor: contracts.EulDistributorContract;\n  eulerGeneralView: contracts.EulerGeneralViewContract;\n  eul: contracts.EulContract;\n  [contractName: string]: Contract;\n};\n\n\n// export type TokenCache = {\n//   'erc20': {\n//     [address: string]: Contract | ERC20Contract\n//   },\n//   'eToken': {\n//     [address: string]: Contract | contracts.ETokenContract\n//   },\n//   'dToken': {\n//     [address: string]: Contract | contracts.DTokenContract\n//   },\n//   'pToken': {\n//     [address: string]: Contract | contracts.PTokenContract\n//   }\n// };\n\nexport enum TokenType {\n  ERC20 = \"erc20\",\n  EToken = \"eToken\",\n  DToken = \"dToken\",\n  PToken = \"pToken\"\n}\n\nexport type TokenCache = {\n  [type: string]: {\n    [address: string]: \n      Contract\n      | ERC20Contract\n      | contracts.ETokenContract\n      | contracts.DTokenContract\n      | contracts.PTokenContract\n  }\n};\n\nexport type UnderlyingToTokenCache = {\n  [underlying: string]: {\n    [type: string]: string\n  }\n};","import { BigNumberish, ethers } from \"ethers\";\n\nconst ABI_EIP2612 = [\n  \"function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s)\",\n  \"function nonces(address owner) view returns (uint)\",\n  \"function _nonces(address owner) view returns (uint)\",\n];\nconst ABI_EIP2612_PACKED = [\n  \"function permit(address owner, address spender, uint value, uint deadline, bytes signature)\",\n  \"function nonces(address owner) view returns (uint)\",\n];\nconst ABI_ALLOWED = [\n  \"function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\",\n  \"function nonces(address owner) view returns (uint)\",\n];\n\nconst TYPES_PERMIT_EIP2612 = {\n  Permit: [\n    {\n      name: \"owner\",\n      type: \"address\",\n    },\n    {\n      name: \"spender\",\n      type: \"address\",\n    },\n    {\n      name: \"value\",\n      type: \"uint256\",\n    },\n    {\n      name: \"nonce\",\n      type: \"uint256\",\n    },\n    {\n      name: \"deadline\",\n      type: \"uint256\",\n    },\n  ],\n};\nconst TYPES_PERMIT_ALLOWED = {\n  Permit: [\n    {\n      name: \"holder\",\n      type: \"address\",\n    },\n    {\n      name: \"spender\",\n      type: \"address\",\n    },\n    {\n      name: \"nonce\",\n      type: \"uint256\",\n    },\n    {\n      name: \"expiry\",\n      type: \"uint256\",\n    },\n    {\n      name: \"allowed\",\n      type: \"bool\",\n    },\n  ],\n};\n\nexport const signPermit = async (\n  tokenAddress: string,\n  { type, variant, domain }: { type: string; variant?: string; domain: any },\n  {\n    spender,\n    value,\n    allowed,\n    deadline,\n  }: {\n    spender: string;\n    value?: BigNumberish;\n    allowed?: boolean;\n    deadline: number;\n  },\n  signer: ethers.Signer\n) => {\n  if (!ethers.Signer.isSigner(signer)) {\n    throw new Error(\"Invalid signer\");\n  }\n\n  // future proof experimental feature\n  const sign = (signer as any)._signTypedData\n    ? (signer as any)._signTypedData.bind(signer)\n    : (signer as any).signTypedData.bind(signer);\n\n  const signerAddress = await signer.getAddress();\n\n  if (type === \"EIP2612\") {\n    const token = new ethers.Contract(\n      tokenAddress,\n      variant === \"PACKED\" ? ABI_EIP2612_PACKED : ABI_EIP2612,\n      signer\n    );\n\n    let nonce;\n\n    if (variant === \"UNDERSCORE_NONCES\") {\n      nonce = await token._nonces(signerAddress);\n    } else {\n      nonce = await token.nonces(signerAddress);\n    }\n\n    const rawSignature = await sign(domain, TYPES_PERMIT_EIP2612, {\n      owner: signerAddress,\n      spender,\n      value,\n      nonce,\n      deadline,\n    });\n\n    return {\n      signature: {\n        raw: rawSignature,\n        ...ethers.utils.splitSignature(rawSignature),\n      },\n      nonce,\n    };\n  }\n\n  if (type === \"ALLOWED\") {\n    const token = new ethers.Contract(tokenAddress, ABI_ALLOWED, signer);\n    const nonce = await token.nonces(signerAddress);\n\n    const rawSignature = await sign(domain, TYPES_PERMIT_ALLOWED, {\n      holder: signerAddress,\n      spender,\n      nonce,\n      expiry: deadline,\n      allowed,\n    });\n\n    return {\n      signature: {\n        raw: rawSignature,\n        ...ethers.utils.splitSignature(rawSignature),\n      },\n      nonce,\n    };\n  }\n\n  throw new Error(`Unknown permit type: ${type}`);\n};\n","import { ethers, utils } from \"ethers\";\nimport invariant from \"tiny-invariant\";\n\nexport const uncapitalize = (str: string) =>\n  str.charAt(0).toLowerCase() + str.substring(1);\n\nexport const validateAddress = (address: string) => {\n  invariant(ethers.utils.isAddress(address), \"Invalid address\");\n};\n\nexport const secondsFromNow = (seconds: number) =>\n  Math.floor((Date.now() + seconds * 1000) / 1000);\n\nexport const parseError = (e: any) => {\n  // contracts don't decode certain external revert reasons correctly (Utils.sol)\n  if (e.reason === \"invalid codepoint at offset 2; missing continuation byte\") {\n    try {\n      let msg = utils.defaultAbiCoder.decode([\"string\"], e.value.slice(4))[0];\n      e.reason = msg;\n      msg = `execution reverted: ${msg}`\n      e.message = msg;\n      e.msg = msg;\n      e.code = msg;\n    } catch {}\n  }\n\n  return e;\n}\n","import { BigNumber, utils } from \"ethers\";\n\nexport function getSubAccountId(primaryAddress: string, subAccountAddress: string) {\n  return BigNumber.from(primaryAddress).xor(subAccountAddress).toNumber();\n}\n\nexport function isRealSubAccount(primaryAddress: string, subAccountAddress: string) {\n  return BigNumber.from(primaryAddress).xor(subAccountAddress).lt(256);\n}\n\nexport function getSubAccount(primary: string, subAccountId: number | string) {\n  if (parseInt(subAccountId as string) !== subAccountId || subAccountId > 256)\n    throw `invalid subAccountId: ${subAccountId}`\n  return utils.hexZeroPad(\n    BigNumber.from(primary).xor(subAccountId).toHexString(),\n    20,\n  )\n}\n","import { ethers, ContractInterface, providers, Contract } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { abi as ERC20Abi, ERC20Contract } from \"./ERC20\";\nimport { signPermit } from \"./permits\";\nimport {\n  uncapitalize,\n  validateAddress,\n  secondsFromNow,\n  parseError,\n} from \"./helpers\";\n\nimport * as utils from \"./utils\";\n\nimport addressesMainnet from \"@eulerxyz/euler-interfaces/addresses/addresses-mainnet.json\";\nimport addressesRopsten from \"@eulerxyz/euler-interfaces/addresses/addresses-ropsten.json\";\nimport addressesGoerli from \"@eulerxyz/euler-interfaces/addresses/addresses-goerli.json\";\nimport * as eulerAbis from \"./eulerAbis\";\n\nimport {\n  BatchItem,\n  BatchResponse,\n  TokenWithPermit,\n  EulerAddresses,\n  NetworkConfig,\n  SignerOrProvider,\n  Contracts,\n  TokenCache,\n  TokenType,\n  UnderlyingToTokenCache,\n} from \"./types\";\nimport {\n  EulContract,\n  EulerContract,\n  PTokenContract,\n  ETokenContract,\n  DTokenContract,\n  ExecContract,\n  LiquidationContract,\n  MarketsContract,\n  SwapContract,\n  EulStakesContract,\n  EulDistributorContract,\n  EulerGeneralViewContract,\n} from \"./eulerTypes\";\n\nconst WETH_MAINNET = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\nconst WETH_ROPSTEN = \"0xc778417e063141139fce010982780140aa0cd5ab\";\nconst WETH_GOERLI = \"0xa3401DFdBd584E918f59fD1C3a558467E373DacC\";\n\nconst DEFAULT_PERMIT_DEADLINE_SECONDS = 60 * 60;\nconst LIQUIDITY_CHECK_ERRORS = [\n  \"e/collateral-violation\",\n  \"e/borrow-isolation-violation\",\n];\n\nclass Euler {\n  readonly chainId: number;\n  readonly contracts: Contracts;\n  readonly abis: { [contractName: string]: ContractInterface };\n  readonly addresses: EulerAddresses;\n  readonly eulTokenConfig: TokenWithPermit;\n  readonly referenceAsset: string;\n\n  private _tokenCache: TokenCache;\n  private _underlyingToTokenCache: UnderlyingToTokenCache;\n  private _signerOrProvider?: SignerOrProvider;\n\n  constructor(\n    signerOrProvider?: SignerOrProvider,\n    chainId = 1,\n    networkConfig?: NetworkConfig\n  ) {\n    this.chainId = chainId;\n    this._tokenCache = {\n      [TokenType.EToken]: {},\n      [TokenType.DToken]: {},\n      [TokenType.PToken]: {},\n      [TokenType.ERC20]: {},\n    };\n    this._underlyingToTokenCache = {};\n    this._signerOrProvider = signerOrProvider;\n\n    if (this.chainId === 1) {\n      const { eul: eulConfig, ...addresses } = addressesMainnet;\n      this.eulTokenConfig = eulConfig;\n      this.addresses = addresses as any;\n\n      this.referenceAsset = WETH_MAINNET;\n    } else if (this.chainId === 3) {\n      const { eul: eulConfig, ...addresses } = addressesRopsten;\n      this.eulTokenConfig = eulConfig;\n      this.addresses = addresses as any;\n\n      this.referenceAsset = WETH_ROPSTEN;\n    } else if (this.chainId === 420) {\n      const { eul: eulConfig, ...addresses } = addressesGoerli;\n      this.eulTokenConfig = eulConfig;\n      this.addresses = addresses as any;\n\n      this.referenceAsset = WETH_GOERLI;\n    } else if (networkConfig) {\n      invariant(\n        networkConfig.addresses,\n        `Missing addresses for chainId ${this.chainId}`\n      );\n      invariant(\n        networkConfig.referenceAsset,\n        `Missing reference asset for chainId ${this.chainId}`\n      );\n\n      this.addresses = networkConfig.addresses;\n      this.referenceAsset = networkConfig.referenceAsset;\n      this.eulTokenConfig = networkConfig.eul;\n    } else {\n      throw new Error(\"Unknown configuration\");\n    }\n\n    this.abis = eulerAbis;\n    this.contracts = this._loadEulerContracts();\n  }\n\n  connect(signerOrProvider: SignerOrProvider) {\n    this._signerOrProvider = signerOrProvider;\n    Object.entries(this.contracts).forEach(([key, c]) => {\n      this.contracts[key] = c.connect(signerOrProvider);\n    });\n\n    return this;\n  }\n\n  getSigner() {\n    if (ethers.Signer.isSigner(this._signerOrProvider)) {\n      return this._signerOrProvider;\n    } else if (\n      ethers.providers.BaseProvider.isProvider(this._signerOrProvider)\n    ) {\n      try {\n        return (\n          this._signerOrProvider as providers.JsonRpcProvider\n        ).getSigner();\n      } catch {}\n    }\n    return null;\n  }\n\n  getProvider() {\n    if (ethers.providers.BaseProvider.isProvider(this._signerOrProvider)) {\n      return this._signerOrProvider;\n    } else if (\n      ethers.Signer.isSigner(this._signerOrProvider) &&\n      this._signerOrProvider.provider\n    ) {\n      return this._signerOrProvider.provider;\n    }\n    return null;\n  }\n\n  addContract(name: string, abi?: ContractInterface, address?: string) {\n    invariant(name, \"Contract name is required\");\n\n    name = uncapitalize(name);\n\n    abi = abi || this.abis[name];\n    invariant(Array.isArray(abi), \"Missing or invalid abi\");\n\n    address = address || (this.addresses[name] as string);\n    validateAddress(address);\n\n    this.contracts[name] = new ethers.Contract(\n      address,\n      abi,\n      typeof this._signerOrProvider === \"string\"\n        ? undefined\n        : this._signerOrProvider\n    );\n    this.abis[name] = abi;\n    this.addresses[name] = address;\n  }\n\n  erc20(address: string) {\n    validateAddress(address);\n    return this._getToken(address, TokenType.ERC20) as ERC20Contract;\n  }\n\n  eToken(address: string) {\n    validateAddress(address);\n    return this._getToken(address, TokenType.EToken) as ETokenContract;\n  }\n\n  dToken(address: string) {\n    validateAddress(address);\n    return this._getToken(address, TokenType.DToken) as DTokenContract;\n  }\n\n  pToken(address: string) {\n    validateAddress(address);\n    return this._getToken(address, TokenType.PToken) as PTokenContract;\n  }\n\n  eTokenOf(underlyingAddress: string) {\n    validateAddress(underlyingAddress);\n    return this._getTokenOf(\n      underlyingAddress,\n      TokenType.EToken\n    ) as Promise<ETokenContract>;\n  }\n\n  dTokenOf(underlyingAddress: string) {\n    validateAddress(underlyingAddress);\n    return this._getTokenOf(\n      underlyingAddress,\n      TokenType.DToken\n    ) as Promise<DTokenContract>;\n  }\n\n  pTokenOf(underlyingAddress: string) {\n    validateAddress(underlyingAddress);\n    return this._getTokenOf(\n      underlyingAddress,\n      TokenType.PToken\n    ) as Promise<PTokenContract>;\n  }\n\n  buildBatch(items: BatchItem[]) {\n    return items.map((currItem) => {\n      let item = { ...currItem };\n      if (item.staticCall) {\n        const scContract = this._batchItemToContract(item);\n        const scPayload = scContract.interface.encodeFunctionData(\n          item.method as any,\n          item.args as any\n        );\n\n        item = {\n          allowError: item.allowError,\n          contract: \"exec\",\n          method: \"doStaticCall\",\n          args: [scContract.address, scPayload],\n        };\n      }\n\n      const contract = this._batchItemToContract(item);\n\n      return {\n        allowError: Boolean(item.allowError),\n        proxyAddr: contract.address,\n        data: contract.interface.encodeFunctionData(\n          item.method as any,\n          item.args as any\n        ),\n      };\n    });\n  }\n\n  async simulateBatch(deferredLiquidity: string[], items: BatchItem[]) {\n    invariant(Array.isArray(items), \"Expecting an array of batch items\");\n\n    const simulate = async () => {\n      try {\n        await this.contracts.exec.callStatic.batchDispatchSimulate(\n          this.buildBatch(items),\n          deferredLiquidity\n        );\n      } catch (e) {\n        if (e.errorName !== \"BatchDispatchSimulation\") throw e;\n        return this.decodeBatch(items, e.errorArgs.simulation);\n      }\n    };\n\n    const estimateGas = async () => {\n      const nonStaticItems = items.filter((i) => !i.staticCall);\n      try {\n        const gas = await this.contracts.exec.estimateGas.batchDispatch(\n          this.buildBatch(nonStaticItems || items),\n          deferredLiquidity\n        );\n        return { gas };\n      } catch (e) {\n        if (e.reason) {\n          for (const liquidityCheckError of LIQUIDITY_CHECK_ERRORS) {\n            if (e.reason.includes(liquidityCheckError))\n              return {\n                error: {\n                  isLiquidityCheck: true,\n                  value: e,\n                },\n              };\n          }\n        }\n        return {\n          error: {\n            isLiquidityCheck: false,\n            value: e,\n          },\n        };\n      }\n    };\n\n    const [simulation, { gas, error }] = await Promise.all([\n      simulate(),\n      estimateGas(),\n    ]);\n\n    return {\n      simulation,\n      gas,\n      error,\n    };\n  }\n\n  decodeBatch(items: BatchItem[], resp: BatchResponse[]) {\n    const decoded: any[] = [];\n\n    for (let i = 0; i < resp.length; i++) {\n      const item = items[i];\n      let decodedItem;\n      try {\n        const decoded = this._batchItemToContract(\n          item\n        ).interface.decodeFunctionResult(item.method as any, resp[i].result);\n        decodedItem = {\n          success: true,\n          response: decoded,\n        };\n      } catch (e) {\n        decodedItem = {\n          success: false,\n          response: parseError(e),\n        };\n      }\n\n      decoded.push(decodedItem);\n    }\n\n    return decoded;\n  }\n\n  signPermit(\n    token: TokenWithPermit,\n    {\n      spender = this.contracts.euler.address,\n      value = ethers.constants.MaxUint256,\n      allowed = true,\n      deadline = secondsFromNow(DEFAULT_PERMIT_DEADLINE_SECONDS),\n    },\n    signer = this.getSigner()\n  ) {\n    invariant(\n      ethers.Signer.isSigner(this._signerOrProvider),\n      \"Signer in not provided\"\n    );\n    invariant(\n      token && token.extensions && token.extensions.permit,\n      \"Invalid token or missing permit config\"\n    );\n\n    const { type, variant, domain } = token.extensions.permit;\n\n    return signPermit(\n      token.address,\n      { type, variant, domain },\n      { spender, value, allowed, deadline },\n      signer as ethers.Signer\n    );\n  }\n\n  async signPermitBatchItem(\n    token: TokenWithPermit,\n    {\n      value = ethers.constants.MaxUint256,\n      allowed = true,\n      deadline = secondsFromNow(DEFAULT_PERMIT_DEADLINE_SECONDS),\n    },\n    allowError = false,\n    signer = this.getSigner()\n  ) {\n    const { nonce, signature } = await this.signPermit(\n      token,\n      { spender: this.contracts.euler.address, value, allowed, deadline },\n      signer\n    );\n\n    const { type, variant } = token.extensions.permit;\n    let batchItem;\n\n    if (type === \"EIP2612\") {\n      if (variant === \"PACKED\") {\n        batchItem = {\n          allowError,\n          contract: \"exec\",\n          method: \"usePermitPacked\",\n          args: [token.address, value, deadline, signature.raw],\n        };\n      } else {\n        batchItem = {\n          allowError,\n          contract: \"exec\",\n          method: \"usePermit\",\n          args: [\n            token.address,\n            value,\n            deadline,\n            signature.v,\n            signature.r,\n            signature.s,\n          ],\n        };\n      }\n    } else {\n      batchItem = {\n        allowError,\n        contract: \"exec\",\n        method: \"usePermitAllowed\",\n        args: [\n          token.address,\n          nonce,\n          deadline,\n          allowed,\n          signature.v,\n          signature.r,\n          signature.s,\n        ],\n      };\n    }\n    return batchItem;\n  }\n\n  private _getToken(address: string, type: TokenType) {\n    if (!this._tokenCache[type][address]) {\n      this._tokenCache[type][address] = new ethers.Contract(\n        address,\n        type === TokenType.ERC20 ? ERC20Abi : this.abis[type],\n        typeof this._signerOrProvider === \"string\"\n          ? undefined\n          : this._signerOrProvider\n      );\n    }\n\n    return this._signerOrProvider\n      ? this._tokenCache[type][address].connect(this._signerOrProvider)\n      : this._tokenCache[type][address];\n  }\n\n  private async _getTokenOf(underlyingAddress: string, type: TokenType) {\n    if (!this._underlyingToTokenCache[underlyingAddress]) {\n      this._underlyingToTokenCache[underlyingAddress] = {};\n    }\n\n    if (!this._underlyingToTokenCache[underlyingAddress][type]) {\n      let tokenAddress;\n      if (type === TokenType.EToken) {\n        tokenAddress = await this.contracts.markets.underlyingToEToken(\n          underlyingAddress\n        );\n      } else if (type === TokenType.DToken) {\n        tokenAddress = await this.contracts.markets.underlyingToDToken(\n          underlyingAddress\n        );\n      } else if (type === TokenType.PToken) {\n        tokenAddress = await this.contracts.markets.underlyingToPToken(\n          underlyingAddress\n        );\n      } else {\n        throw new Error(`Unsupported token type: ${type}`);\n      }\n      if (tokenAddress === ethers.constants.AddressZero)\n        throw new Error(`No ${type} found for underlying ${underlyingAddress}`);\n\n      this._underlyingToTokenCache[underlyingAddress][type] = tokenAddress;\n    }\n\n    return this[type](this._underlyingToTokenCache[underlyingAddress][type]);\n  }\n\n  private _batchItemToContract(item: BatchItem) {\n    if (item.contract instanceof ethers.Contract) return item.contract;\n    if (this.contracts[item.contract]) return this.contracts[item.contract];\n\n    if (item.address) {\n      if (item.contract === TokenType.EToken) return this.eToken(item.address);\n      if (item.contract === TokenType.DToken) return this.dToken(item.address);\n      if (item.contract === TokenType.PToken) return this.pToken(item.address);\n      if (item.contract === TokenType.ERC20) return this.erc20(item.address);\n    }\n\n    throw new Error(`Unknown contract ${item.contract}`);\n  }\n\n  private _loadEulerContracts(): Contracts {\n    const createContract = (name: string) =>\n      new Contract(\n        this.addresses[uncapitalize(name)],\n        this.abis[uncapitalize(name)],\n        typeof this._signerOrProvider === \"string\"\n          ? undefined\n          : this._signerOrProvider\n      );\n\n    return {\n      euler: createContract(\"Euler\") as EulerContract,\n      exec: createContract(\"Exec\") as ExecContract,\n      liquidation: createContract(\"Liquidation\") as LiquidationContract,\n      markets: createContract(\"Markets\") as MarketsContract,\n      swap: createContract(\"Swap\") as SwapContract,\n      eulStakes: createContract(\"EulStakes\") as EulStakesContract,\n      eulDistributor: createContract(\n        \"EulDistributor\"\n      ) as EulDistributorContract,\n      eulerGeneralView: createContract(\n        \"EulerGeneralView\"\n      ) as EulerGeneralViewContract,\n      eul: new Contract(\n        this.eulTokenConfig.address,\n        this.abis.eul,\n        typeof this._signerOrProvider === \"string\"\n          ? undefined\n          : this._signerOrProvider\n      ) as EulContract,\n    };\n  }\n}\n\nexport { Euler, utils };\n"],"names":["TokenType","abi","ABI_EIP2612","ABI_EIP2612_PACKED","ABI_ALLOWED","TYPES_PERMIT_EIP2612","Permit","name","type","TYPES_PERMIT_ALLOWED","uncapitalize","str","charAt","toLowerCase","substring","validateAddress","address","invariant","ethers","utils","isAddress","secondsFromNow","seconds","Math","floor","Date","now","parseError","e","reason","msg","defaultAbiCoder","decode","value","slice","message","code","getSubAccountId","primaryAddress","subAccountAddress","BigNumber","from","xor","toNumber","lt","primary","subAccountId","parseInt","hexZeroPad","toHexString","LIQUIDITY_CHECK_ERRORS","Euler","signerOrProvider","chainId","networkConfig","_this$_tokenCache","this","contracts","abis","addresses","eulTokenConfig","referenceAsset","_tokenCache","_underlyingToTokenCache","_signerOrProvider","EToken","DToken","PToken","ERC20","eulConfig","addressesMainnet","eul","_objectWithoutPropertiesLoose","_excluded","addressesRopsten","_excluded2","addressesGoerli","_excluded3","Error","eulerAbis","_loadEulerContracts","connect","_this","Object","entries","forEach","_ref","getSigner","Signer","isSigner","providers","BaseProvider","isProvider","_unused","getProvider","provider","addContract","Array","isArray","Contract","undefined","erc20","_getToken","eToken","dToken","pToken","eTokenOf","underlyingAddress","_getTokenOf","dTokenOf","pTokenOf","buildBatch","items","_this2","map","currItem","item","staticCall","scContract","_batchItemToContract","scPayload","encodeFunctionData","method","args","allowError","contract","Boolean","proxyAddr","data","simulateBatch","deferredLiquidity","Promise","all","simulate","resolve","_catch","_this4","exec","callStatic","batchDispatchSimulate","then","errorName","decodeBatch","errorArgs","simulation","reject","estimateGas","nonStaticItems","filter","i","batchDispatch","gas","_step","_iterator","_createForOfIteratorHelperLoose","done","includes","error","isLiquidityCheck","resp","decoded","length","decodedItem","success","response","decodeFunctionResult","result","push","signPermit","token","_ref3","signer","spender","_ref3$spender","euler","constants","MaxUint256","_ref3$value","_ref3$allowed","allowed","deadline","_ref3$deadline","extensions","permit","tokenAddress","variant","domain","_ref2","sign","_signTypedData","bind","signTypedData","getAddress","signerAddress","_exit","_temp6","_result","_exit2","_temp4","_result2","nonces","nonce","holder","expiry","rawSignature","_signature$nonce2","signature","raw","splitSignature","_temp3","_temp5","_temp7","owner","_signature$nonce","_nonces","_token$nonces","_temp8","signPermitBatchItem","_ref4$allowed","_this6","_ref5","_token$extensions$per2","v","r","s","ERC20Abi","_result5","_this8","AddressZero","markets","underlyingToEToken","_this7$contracts$mark","underlyingToDToken","_this7$contracts$mark2","underlyingToPToken","_this7$contracts$mark3","_this9","createContract","liquidation","swap","eulStakes","eulDistributor","eulerGeneralView"],"mappings":"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"}